<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM4.MM4_2.MM4_13">
	<typeAlias alias="MM4_13VO_END_CODE" type="lionsclubs.com.MM4.MM4_2.MM4_13.MM4_13VO_END_CODE"/>
	<typeAlias alias="MM4_13VO_PARAM" type="lionsclubs.com.MM4.MM4_2.MM4_13.MM4_13VO_PARAM"/>
	
	<sql id="lionsclubs.com.MM4.MM4_2.MM4_13.commonSql">
	<![CDATA[
DECLARE @orgCode NVARCHAR(10)
DECLARE @yearCode INT
DECLARE @term INT
DECLARE @fromDate NVARCHAR(8)
DECLARE @toDate NVARCHAR(8)
DECLARE @startDate NVARCHAR(8)
DECLARE @endDate NVARCHAR(8)

SET @orgCode  = #orgCode#;
SET @yearCode = #yearCode#;
SET @term = #term#;
SET @fromDate = CAST(@yearCode - 1 as NVARCHAR) + '0701';
SET @toDate = CAST(@yearCode - 0 as NVARCHAR) + '0630';
SET @startDate = CAST(@yearCode - 20 as NVARCHAR) + '0701';
SET @endDate = @toDate;

WITH BASE_YEAR_MONTH AS (
SELECT
	@yearCode as BASE_YEAR
)
,
BASE_YEAR_LIST(LEVEL,B_YEAR) AS (
	SELECT
		 1 AS LEVEL
		,@yearCode	as B_YEAR
	FROM BASE_YEAR_MONTH
	UNION ALL
	SELECT
		   LEVEL + 1 AS LEVEL
		,A.BASE_YEAR - LEVEL as B_YEAR
	FROM BASE_YEAR_MONTH A
	INNER JOIN BASE_YEAR_LIST B
	ON 1=1
	WHERE B.LEVEL BETWEEN 0 AND @term
)
,
KEY_YEAR_LIST(START_DATE ,END_DATE ,B_YEAR) AS (
	SELECT
		 CAST(CAST(B_YEAR - 1 as NVARCHAR(4)) + '0701' as NVARCHAR(8)) as START_DATE
		,CAST(CAST(B_YEAR - 0 as NVARCHAR(4)) + '0630' as NVARCHAR(8)) as END_DATE
		,CAST(B_YEAR as INT) as B_YEAR
	FROM BASE_YEAR_LIST
)
,
ORG_TREE_PREV AS ( /* 폐지조직 포함 조직트리 */
		SELECT
			 A.ORGAN_CODE
			,A.UPPER_ORGAN_CODE
			,C.B_YEAR
			,D.ORGAN_ABOLISH_DATE
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A
		INNER JOIN (
			SELECT
				 MAX(B.IDN_NO) as IDN_NO
				,B.ORGAN_CODE
				,B.B_YEAR
			FROM ( 
				SELECT
					 A.ORGAN_CODE
					,A.IDN_NO
					,MAX(A.CHANGE_DATE) OVER(PARTITION BY A.ORGAN_CODE,B.B_YEAR) as CHANGE_DATE
					,B.B_YEAR
				FROM dbo.LIONS_ORGAN_CODE_HISTORY A
				INNER JOIN KEY_YEAR_LIST B
				ON A.CHANGE_DATE BETWEEN B.START_DATE AND B.END_DATE
			) B
			GROUP BY B.ORGAN_CODE,B.CHANGE_DATE,B.B_YEAR
		) C ON C.IDN_NO = A.IDN_NO
		INNER JOIN KEY_YEAR_LIST X ON X.B_YEAR = C.B_YEAR
		INNER JOIN dbo.LIONS_ORGAN_CODE D
		ON D.ORGAN_CODE = A.ORGAN_CODE
		AND D.SPOT_NIGHT != ''
		AND (
					D.ORGAN_ABOLISH_DATE IS NULL 
				OR	D.ORGAN_ABOLISH_DATE = '' 
				OR	D.ORGAN_ABOLISH_DATE >= X.[START_DATE]
		)
),
ORG_TREE AS (
	SELECT 
		P.ORGAN_CODE, P.UPPER_ORGAN_CODE, P.B_YEAR
	FROM ORG_TREE_PREV P 
	INNER JOIN KEY_YEAR_LIST Y ON Y.B_YEAR=P.B_YEAR
	WHERE P.ORGAN_ABOLISH_DATE < Y.[START_DATE] OR P.ORGAN_ABOLISH_DATE >= Y.END_DATE	
 ),
MEMBER_CNT AS (
SELECT
	 COUNT(A.MEMBER_NO) as MEM_CNT
	,X.B_YEAR as B_YEAR
FROM dbo.LIONS_MEMBER_INFO A
INNER JOIN KEY_YEAR_LIST X ON 1 = 1
INNER JOIN dbo.LIONS_MEMBER_CLUB_HIST B
ON B.MEMBER_NO = A.MEMBER_NO
	AND B.START_DATE <= X.END_DATE AND B.END_DATE > X.END_DATE
INNER JOIN ORG_TREE C
ON C.ORGAN_CODE = B.ORGAN_CODE AND C.B_YEAR = X.B_YEAR
INNER JOIN ORG_TREE D
ON D.ORGAN_CODE = C.UPPER_ORGAN_CODE AND D.B_YEAR = X.B_YEAR
INNER JOIN ORG_TREE E
ON E.ORGAN_CODE = D.UPPER_ORGAN_CODE AND E.B_YEAR = X.B_YEAR
INNER JOIN ORG_TREE F
ON F.ORGAN_CODE = E.UPPER_ORGAN_CODE AND F.B_YEAR = X.B_YEAR
WHERE
]]>
<isEqual property="lvl" compareValue="1">
<![CDATA[
	     F.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="2">
<![CDATA[
	     E.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="3">
<![CDATA[
	     D.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="4">
<![CDATA[
	     C.ORGAN_CODE = @orgCode
]]>
</isEqual>
<![CDATA[
GROUP BY 
	  X.B_YEAR
]]>
<isEqual property="lvl" compareValue="1" prepend=",">
<![CDATA[
	     F.ORGAN_CODE
]]>
</isEqual>
<isEqual property="lvl" compareValue="2" prepend=",">
<![CDATA[
	     E.ORGAN_CODE
]]>
</isEqual>
<isEqual property="lvl" compareValue="3" prepend=",">
<![CDATA[
	     D.ORGAN_CODE
]]>
</isEqual>
<isEqual property="lvl" compareValue="4" prepend=",">
<![CDATA[
	     C.ORGAN_CODE
]]>
</isEqual>
<![CDATA[
)
,
MEMBER_CNT_OUT AS ( /* 퇴회사유별 회원수 */
	SELECT
		 B_YEAR
		]]>		
		<iterate property="outCode" conjunction="," prepend=",">		
			<![CDATA[
				 [$outCode[]$]
			]]>
		</iterate>
		<![CDATA[

	FROM (
		SELECT
			 X.B_YEAR as B_YEAR
			,A.APP_DESC_CODE
			,A.MEMBER_NO
		FROM dbo.LIONS_APPOINTMENT A
		INNER JOIN KEY_YEAR_LIST X 
		ON 
			A.APP_KIND_CODE = '1050' 
		AND A.[START_DATE] BETWEEN @startDate AND @endDate
		AND (A.END_DATE BETWEEN X.START_DATE AND X.END_DATE)
		INNER JOIN ORG_TREE C
		ON C.ORGAN_CODE = A.ORGAN_CODE AND C.B_YEAR = X.B_YEAR
		INNER JOIN ORG_TREE D
		ON D.ORGAN_CODE = C.UPPER_ORGAN_CODE AND D.B_YEAR = X.B_YEAR
		INNER JOIN ORG_TREE E
		ON E.ORGAN_CODE = D.UPPER_ORGAN_CODE AND E.B_YEAR = X.B_YEAR
		INNER JOIN ORG_TREE F
		ON F.ORGAN_CODE = E.UPPER_ORGAN_CODE AND F.B_YEAR = X.B_YEAR
		WHERE 
			A.APP_KIND_CODE = '1050' 
]]>
<isEqual property="lvl" compareValue="1" prepend="AND">
<![CDATA[
	     F.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="2" prepend="AND">
<![CDATA[
	     E.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="3" prepend="AND">
<![CDATA[
	     D.ORGAN_CODE = @orgCode
]]>
</isEqual>
<isEqual property="lvl" compareValue="4" prepend="AND">
<![CDATA[
	     C.ORGAN_CODE = @orgCode
]]>
</isEqual>
<![CDATA[
	) X
	PIVOT(COUNT(X.MEMBER_NO) FOR X.APP_DESC_CODE IN (
		]]>
		<iterate property="outCode" conjunction=",">		
			<![CDATA[
				 [$outCode[]$]
			]]>
		</iterate>
		<![CDATA[
	)) as PVT
)

]]>
	</sql>
 	
 	<select id="lionsclubs.com.MM4.MM4_2.MM4_13.selectData" resultClass="java.util.HashMap" parameterClass="MM4_13VO_PARAM">
		<include refid="lionsclubs.com.MM4.MM4_2.MM4_13.commonSql" />
		<![CDATA[
			SELECT
				 CAST(A.B_YEAR - 1 as NVARCHAR(4)) + '-' + CAST(A.B_YEAR as NVARCHAR(4)) as years
				,ISNULL(B.MEM_CNT,0) as memCnt
		]]>
		<iterate property="outCode" conjunction="," prepend=",">		
			<![CDATA[
				 ISNULL(C.[$outCode[]$],0) as [$outCode[]$]
			]]>
		</iterate>
		<iterate property="outCode" conjunction="+"  prepend=",">		
			<![CDATA[
				   ISNULL(C.[$outCode[]$],0)
			]]>
		</iterate>
		<![CDATA[
				as outCnt
			FROM BASE_YEAR_LIST A
			LEFT OUTER JOIN MEMBER_CNT B ON B.B_YEAR = A.B_YEAR
			LEFT OUTER JOIN MEMBER_CNT_OUT C ON C.B_YEAR = A.B_YEAR
			ORDER BY A.B_YEAR DESC
		]]>	
 	</select>
	
</sqlMap>
