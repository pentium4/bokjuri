<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="lionsclubs.com.main">
	<typeAlias  alias="mainParamVO" type="lionsclubs.com.main.MainParamVO"/>
	<typeAlias  alias="AnniversaryInfoDataVO" type="lionsclubs.com.main.AnniversaryInfoDataVO"/>
	<typeAlias alias="eventVO" type="lionsclubs.com.main.EventVO"/>
		
 	<select id="lionsclubs.com.main.getAnniversaryCountInfo" resultClass="java.util.HashMap" parameterClass="mainParamVO">
 	<![CDATA[
		DECLARE @organCode NVARCHAR(10)
		DECLARE @yearCode INT
		DECLARE @fromDate NVARCHAR(8)
		DECLARE @toDate NVARCHAR(8)
		DECLARE @anniversaryDayFrom NVARCHAR(4)
		DECLARE @anniversaryDayTo NVARCHAR(4)	
		
		SET @organCode = #organCode#;
		SET @yearCode = #yearCode#;
		SET @fromDate = CAST(@yearCode - 1 as NVARCHAR) + '0701';
		SET @toDate = CAST(@yearCode - 0 as NVARCHAR) + '0630';
		SET @anniversaryDayFrom = SUBSTRING(CONVERT(NVARCHAR(8),GETDATE(),112),5,4);
		SET @anniversaryDayTo = SUBSTRING(CONVERT(NVARCHAR(8),DATEADD(d,7,GETDATE()),112),5,4);
		
		SELECT
		  COUNT(*) as cnt
		, A.KIND_CODE	as kindCode
		, C.CODE_NAME as codeName
		FROM dbo.LIONS_ANNIVERSARY A
		INNER JOIN dbo.LIONS_MEMBER_CLUB_HIST B
		ON B.MEMBER_NO = A.MEMBER_NO AND B.ORGAN_CODE = @organCode
		AND (
			(B.START_DATE >= @fromDate AND B.START_DATE <= @toDate)
		 OR (B.END_DATE   >= @fromDate AND B.END_DATE <= @toDate)
		 OR (B.START_DATE <= @fromDate AND B.END_DATE >= @fromDate) 
		 OR (B.START_DATE <= @toDate AND B.END_DATE >= @toDate)
		)
		INNER JOIN dbo.LIONS_CODE C
		ON C.GROUP_CODE = '2680' AND C.CODE = A.KIND_CODE AND C.USE_YN = 'Y'
		WHERE SUBSTRING(A.ANNIVERSARY_DAY,5,4) BETWEEN @anniversaryDayFrom AND @anniversaryDayTo
		GROUP BY A.KIND_CODE,C.CODE_NAME,C.ORD
		ORDER BY C.ORD ASC
	]]>
 	</select>
 	
 	<select id="lionsclubs.com.main.getDistrictName" resultClass="java.lang.String" parameterClass="java.lang.String">
 	<![CDATA[
		DECLARE @organCode NVARCHAR(10)
		
		SET @organCode = #organCode#;
		
		SELECT
		  KO_ABBR2 as districtName
		FROM dbo.LIONS_ORGAN_CODE
		WHERE ORGAN_CODE = @organCode
	]]>
 	</select>
 	
  	<select id="lionsclubs.com.main.getAnniversaryInfo" resultClass="AnniversaryInfoDataVO" parameterClass="mainParamVO">
 	<![CDATA[
	DECLARE @organCode NVARCHAR(10)
	DECLARE @yearCode INT
	DECLARE @fromDate NVARCHAR(8)
	DECLARE @toDate NVARCHAR(8)
	DECLARE @kindCode NVARCHAR(10)
	DECLARE @anniversaryDayFrom NVARCHAR(4)
	DECLARE @anniversaryDayTo NVARCHAR(4)	

	
	SET @organCode = #organCode#;
	SET @yearCode = #yearCode#;
	SET @fromDate = CAST(@yearCode - 1 as NVARCHAR) + '0701';
	SET @toDate = CAST(@yearCode - 0 as NVARCHAR) + '0630';
	SET @kindCode  = #kindCode#;
	SET @anniversaryDayFrom = SUBSTRING(CONVERT(NVARCHAR(8),GETDATE(),112),5,4);
	SET @anniversaryDayTo = SUBSTRING(CONVERT(NVARCHAR(8),DATEADD(d,7,GETDATE()),112),5,4);
	
	SELECT
	  SUBSTRING(A.ANNIVERSARY_DAY,5,2) + '.' + SUBSTRING(A.ANNIVERSARY_DAY,7,2) as anniversaryDay
	, case A.PM_KIND when 'M' then '음력' else '양력' end as pmKindName
	, A.[MESSAGE] as message
	, C.NAME as memberName
	FROM dbo.LIONS_ANNIVERSARY A
	INNER JOIN dbo.LIONS_MEMBER_CLUB_HIST B
	ON B.MEMBER_NO = A.MEMBER_NO AND B.ORGAN_CODE = @organCode
	AND (
		(B.START_DATE >= @fromDate AND B.START_DATE <= @toDate)
	 OR (B.END_DATE   >= @fromDate AND B.END_DATE <= @toDate)
	 OR (B.START_DATE <= @fromDate AND B.END_DATE >= @fromDate) 
	 OR (B.START_DATE <= @toDate AND B.END_DATE >= @toDate)
	)
	INNER JOIN dbo.LIONS_MEMBER_INFO C
	ON C.MEMBER_NO = A.MEMBER_NO
	WHERE A.KIND_CODE = @kindCode
	AND SUBSTRING(A.ANNIVERSARY_DAY,5,4) BETWEEN @anniversaryDayFrom AND @anniversaryDayTo
	ORDER BY SUBSTRING(A.ANNIVERSARY_DAY,5,4) ASC
	]]>
 	</select>
 	
	<select id="lionsclubs.com.main.eventList" resultClass="eventVO">
		DECLARE @organCode NVARCHAR(6)	/* 조직코드 */
		
		SET @organCode = REPLACE(#organCode#, '-', '')
			
		SELECT  TOP 5 MIN(ES.IDN_NO) AS idnNo
			   ,MIN(ES.EVENT_START_DATE) AS eventStartDate	/* 행사시작기간 */
			   ,MIN(ES.EVENT_END_DATE) AS eventEndDate	/* 행사종료기간 */
			   ,MIN(ES.EVENT_START_TIME) AS eventStartTime	/* 행사시작시간 */
			   ,MIN(ES.EVENT_END_TIME) AS eventEndTime	/* 행사종료시간 */
			   ,CASE WHEN MIN(EC.KIND_CODE) IS NULL
			         THEN '주최'
			         WHEN ES.ORGAN_CODE = @organCode
			         THEN '주최 및 ' + dbo.FN_LIONS_CODE_NAME('4000', MIN(EC.KIND_CODE))
			         ELSE dbo.FN_LIONS_CODE_NAME('4000', MIN(EC.KIND_CODE)) END AS kindName	/* 행사주관명 */
			   ,dbo.FN_LIONS_CODE_NAME('4020', MIN(ES.EVENT_NAME_CODE)) AS eventName	/* 행사명 */
			   ,MIN(ES.EVENT_DESC) AS eventDesc	/* 행사내용 및 장소 */
			   ,(SELECT TOP 1 FILE_ID FROM J_ATTACHFILE WHERE FILE_ID = MIN(ES.FILE_ID)) AS fileId	/* 사진 */
			   ,(SELECT COUNT(*) FROM J_ATTACHFILE WHERE FILE_ID = MIN(ES.FILE_ID)) AS fileCnt	/* 사진갯수 */
			   ,ISNULL(MIN(ES.FINISH_YN), 'N') AS finishYn	/* 마감여부 */
			   ,dbo.FN_GetIdxDataLikeSplit(MIN(INFO.PATH_ABBR2),4,'/') AS clubName	/* 작성자 클럽명 */
			   ,MIN(INFO.NAME) AS insertName		/* 작성자명 */
			   ,CASE WHEN MIN(INFO.ASSOCIATION_TITLE) IS NOT NULL
			         THEN MIN(INFO.ASSOCIATION_TITLE)
			         WHEN MIN(INFO.COMPLEX_TITLE) IS NOT NULL
			         THEN MIN(INFO.COMPLEX_TITLE)
			         WHEN MIN(INFO.DISTRICT_TITLE) IS NOT NULL
			         THEN MIN(INFO.DISTRICT_TITLE)
			         WHEN MIN(INFO.CLUB_TITLE) IS NOT NULL
			         THEN MIN(INFO.CLUB_TITLE)
			          END AS title		/* 작성자 타이틀 */
		  FROM LIONS_EVENT_SPONSOR ES
		 INNER JOIN LIONS_MEMBER_INFO_VIEW INFO
		    ON INFO.MEMBER_NO = ES.INSERT_NAME
		  LEFT OUTER JOIN LIONS_EVENT_CLUB EC
		    ON ES.IDN_NO = EC.IDN_NO
		   AND EC.CLUB_CODE = @organCode
		 WHERE EC.CLUB_CODE = @organCode
		    OR ES.ORGAN_CODE = @organCode
		 GROUP BY  ES.ORGAN_CODE
				  ,ES.IDN_NO
		 ORDER BY  MIN(ES.EVENT_START_DATE) DESC
				  ,MIN(ES.EVENT_START_TIME) DESC
	</select>
</sqlMap>
