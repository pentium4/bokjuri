<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM3.MM3_3.MM3_15">

	<typeAlias alias="MM3_15VO" type="lionsclubs.com.MM3.MM3_3.MM3_15.MM3_15VO"/>
	
		<select id="lionsclubs.com.MM3.MM3_3.MM3_15.selectList" resultClass="java.util.HashMap" parameterClass="MM3_15VO">
			<![CDATA[
DECLARE @orgCode NVARCHAR(10)
DECLARE @yearCode INT
DECLARE @fromDate NVARCHAR(8)
DECLARE @toDate NVARCHAR(8)
DECLARE @baseDate DATE

SET @orgCode = #orgCode#;
SET @yearCode = #thisYear#;
SET @fromDate = CAST(@yearCode - 1 as NVARCHAR) + '0701';
SET @toDate = CAST(@yearCode - 0 as NVARCHAR) + '0630';
SET @baseDate = CONVERT(DATE, CAST(@yearCode - 0 as NVARCHAR) + '0101',112);

WITH 
YEAR_TREE(LEVEL) AS (
	SELECT
		 1 AS LEVEL
	UNION ALL
	SELECT
		   LEVEL + 1 AS LEVEL
	FROM YEAR_TREE A
	WHERE LEVEL < 16
)
, 
BASE_YEAR_LIST AS (
	SELECT
		 LEVEL
		,CASE LEVEL 
			WHEN  1 THEN '25세미만'
			WHEN  2 THEN '30세미만'
			WHEN  3 THEN '30-32세'
			WHEN  4 THEN '32-35세'
			WHEN  5 THEN '35-37세'
			WHEN  6 THEN '37-40세'
			WHEN  7 THEN '40-42세'
			WHEN  8 THEN '42-45세'
			WHEN  9 THEN '45-47세'
			WHEN 10 THEN '47-50세'
			WHEN 11 THEN '50-55세'
			WHEN 12 THEN '55-60세'
			WHEN 13 THEN '60-65세'
			WHEN 14 THEN '65-70세'
			WHEN 15 THEN '70-80세'
			WHEN 16 THEN '80세이상'
		 END as AGE_NAME
		,CASE LEVEL 
			WHEN  1 THEN -1000
			WHEN  2 THEN 25
			WHEN  3 THEN 30
			WHEN  4 THEN 32
			WHEN  5 THEN 35
			WHEN  6 THEN 37
			WHEN  7 THEN 40
			WHEN  8 THEN 42
			WHEN  9 THEN 45
			WHEN 10 THEN 47
			WHEN 11 THEN 50
			WHEN 12 THEN 55
			WHEN 13 THEN 60
			WHEN 14 THEN 65
			WHEN 15 THEN 70
			WHEN 16 THEN 80
		 END as START_AGE
		,CASE LEVEL 
			WHEN  1 THEN 24
			WHEN  2 THEN 29
			WHEN  3 THEN 31
			WHEN  4 THEN 34
			WHEN  5 THEN 36
			WHEN  6 THEN 39
			WHEN  7 THEN 41
			WHEN  8 THEN 44
			WHEN  9 THEN 46
			WHEN 10 THEN 49
			WHEN 11 THEN 54
			WHEN 12 THEN 59
			WHEN 13 THEN 64
			WHEN 14 THEN 69
			WHEN 15 THEN 79
			WHEN 16 THEN 1000
		 END as END_AGE
		 
	FROM YEAR_TREE
),


ORG_TREE_TO AS ( /* 조직트리 */
	SELECT
		 A2.ORGAN_CODE
		,A2.UPPER_ORGAN_CODE
		,D.ORGAN_ABOLISH_DATE
	FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
	INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
	WHERE D.SPOT_NIGHT != '' 
		   AND (D.ORGAN_ABOLISH_DATE >= @fromDate OR D.ORGAN_ABOLISH_DATE = '')	
		   AND A2.IDN_NO IN (
				SELECT
				MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
				FROM (
					SELECT
					ORGAN_CODE,
					MAX(CHANGE_DATE) CHANGE_DATE
					FROM dbo.LIONS_ORGAN_CODE_HISTORY
					WHERE CHANGE_DATE BETWEEN @fromDate AND @toDate
					GROUP BY ORGAN_CODE
				) A
				INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
				ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
		)
),

CLUB_CODE_TO AS ( /* 클럽코드  현재 */
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
		FROM ORG_TREE_TO A
		INNER JOIN ORG_TREE_TO B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_TO C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_TO D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		WHERE C.ORGAN_CODE = @orgCode
	),
	CLUB_CODE_OUT AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from CLUB_CODE_TO
		where ORGAN_ABOLISH_DATE >= @fromDate AND ORGAN_ABOLISH_DATE < @toDate
	),

	MEMBER_CNT_TO AS ( /*회원수 현재(현재회기) */
		
			SELECT
				H.MEMBER_NO
				,C.LVL4_CODE as ORGAN_CODE
				,DATEDIFF(year,CONVERT(DATE,case when LEN(I.BIRTH) = 8 and (convert(int,SUBSTRING(I.BIRTH,5,2)) <= 12 and convert(int,SUBSTRING(I.BIRTH,7,2)) <= 31)
						then I.BIRTH 
					else @baseDate end,112),@baseDate) as AGE
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN dbo.LIONS_MEMBER_INFO I ON I.MEMBER_NO = H.MEMBER_NO
			INNER JOIN CLUB_CODE_TO C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT O ON O.LVL4_CODE = C.LVL4_CODE 
			WHERE H.[START_DATE] <= @toDate AND H.END_DATE > @toDate
			AND O.LVL4_CODE is null
	),
	MEMBER_CNT_OUT AS ( /* 회원수 퇴회(현재회기) */
		
			SELECT
				H.MEMBER_NO
				, H.APP_DESC_CODE
				,C.LVL4_CODE as ORGAN_CODE			
				,DATEDIFF(year,CONVERT(DATE,case when LEN(I.BIRTH) = 8 and (convert(int,SUBSTRING(I.BIRTH,5,2)) <= 12 and convert(int,SUBSTRING(I.BIRTH,7,2)) <= 31)
						then I.BIRTH 
					else @baseDate end,112),@baseDate) as AGE
			FROM dbo.LIONS_APPOINTMENT H
			INNER JOIN dbo.LIONS_MEMBER_INFO I ON I.MEMBER_NO = H.MEMBER_NO
			INNER JOIN CLUB_CODE_TO C ON C.LVL4_CODE = H.ORGAN_CODE	
			WHERE H.APP_KIND_CODE = '1050'
			AND H.[START_DATE] BETWEEN @fromDate AND @toDate	
		
	)

, MEMBER_CNT AS (
	SELECT
		 A.LEVEL
		,SUM(CASE WHEN B.AGE BETWEEN A.START_AGE AND A.END_AGE THEN 1 ELSE 0 END) MEM_CNT 
	FROM BASE_YEAR_LIST A
	LEFT OUTER JOIN MEMBER_CNT_TO B
	ON 1 = 1
	GROUP BY A.LEVEL
)
, OUT_MEMBER_CNT AS (
	SELECT
		 A.LEVEL
		,SUM(CASE WHEN B.AGE BETWEEN A.START_AGE AND A.END_AGE THEN 1 ELSE 0 END) OUT_CNT 
	FROM BASE_YEAR_LIST A
	LEFT OUTER JOIN MEMBER_CNT_OUT B
	ON 1 = 1
	GROUP BY A.LEVEL
)
, OUT_MEMBER_DESC_CNT AS (
	SELECT
		 A.LEVEL
		,B.APP_DESC_CODE
		,SUM(CASE WHEN B.AGE BETWEEN A.START_AGE AND A.END_AGE THEN 1 ELSE 0 END) OUT_CNT 
	FROM BASE_YEAR_LIST A
	INNER JOIN MEMBER_CNT_OUT B
	ON 1 = 1
	GROUP BY A.LEVEL,B.APP_DESC_CODE
)

		SELECT
			B.[LEVEL] as level
			, B.AGE_NAME as ageName
			, N.MEM_CNT as memCnt
			]]>
				<iterate property="outCode" conjunction="," prepend=",">		
					<![CDATA[				 
						 ISNULL([$outCode[]$],0) as [$outCode[]$]
					]]>
				</iterate>
				<![CDATA[
			, O.OUT_CNT as outCnt
		FROM BASE_YEAR_LIST B
		INNER JOIN (
			SELECT 
				[LEVEL]
				]]>
					<iterate property="outCode" conjunction="," prepend=",">		
						<![CDATA[				 
							 [$outCode[]$]
						]]>
					</iterate>
					<![CDATA[
			from OUT_MEMBER_DESC_CNT X
			PIVOT(SUM(X.OUT_CNT) FOR X.APP_DESC_CODE IN (
					
					]]>
					<iterate property="outCode" conjunction="," >		
						<![CDATA[				 
							 [$outCode[]$]
						]]>
					</iterate>
					<![CDATA[
					
				)) as PVT
		) Q  ON Q.[LEVEL] = B.[LEVEL]
		INNER JOIN MEMBER_CNT N ON N.[LEVEL] = B.[LEVEL]
		INNER JOIN OUT_MEMBER_CNT O ON O.[LEVEL] = B.[LEVEL]
		ORDER BY B.LEVEL
		
		]]>
		</select>
</sqlMap>
