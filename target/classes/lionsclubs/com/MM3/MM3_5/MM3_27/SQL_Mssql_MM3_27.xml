<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM3.MM3_5.MM3_27">

	<typeAlias alias="MM3_27VO_PARAM" type="lionsclubs.com.MM3.MM3_5.MM3_27.MM3_27VO_PARAM" />
	<typeAlias alias="MM3_27VO_DATA" type="lionsclubs.com.MM3.MM3_5.MM3_27.MM3_27VO_DATA" />
	
	<select id="lionsclubs.com.MM3.MM3_5.MM3_27.selectList" resultClass="MM3_27VO_DATA" parameterClass="MM3_27VO_PARAM">
	<![CDATA[
		DECLARE @orgCode NVARCHAR(10)
		DECLARE @yearCode NVARCHAR(4)
		DECLARE @month NVARCHAR(2)
		DECLARE @toDate NVARCHAR(8)
		DECLARE @fromDate NVARCHAR(8)
		DECLARE @score as INT
		DECLARE @mday as INT
		
		SET @orgCode = #upperCode#;
		SET @yearCode = #thisYear#;
		SET @toDate = CAST(@yearCode as NVARCHAR(4)) + '0630';
		SET @fromDate = CAST(CAST(@yearCode as INT) - 1 as NVARCHAR(4)) + '0701';
		SET @score = (
						SELECT CAST(CODE2 as INT) 
						  FROM dbo.LIONS_CODE 
						 WHERE GROUP_CODE = '8530' 
						   AND CODE1 = SUBSTRING(@orgCode,1,3) + '-' + SUBSTRING(@orgCode,4,3)
					);
		SET @mday = (
						SELECT CAST(CODE2 as INT) 
						  FROM dbo.LIONS_CODE 
						 WHERE GROUP_CODE = '8520' 
						   AND CODE1 = SUBSTRING(@orgCode,1,3) + '-' + SUBSTRING(@orgCode,4,3)
					);
		
		WITH ORG_TREE AS ( /* 전체 조직트리  기간동안의 연합,복합정보 조회용 */
			SELECT  A.ORGAN_CODE
				   ,A.UPPER_ORGAN_CODE
			  FROM dbo.LIONS_ORGAN_CODE_HISTORY A
			 INNER JOIN (
				SELECT  MAX(B.IDN_NO) as IDN_NO
					   ,B.ORGAN_CODE
				  FROM ( 
					SELECT  A.ORGAN_CODE
						   ,A.IDN_NO
						   ,MAX(A.CHANGE_DATE) OVER(PARTITION BY A.ORGAN_CODE) as CHANGE_DATE
					  FROM dbo.LIONS_ORGAN_CODE_HISTORY A
					 WHERE A.CHANGE_DATE BETWEEN @fromDate AND @toDate
				) B
				 GROUP BY B.ORGAN_CODE,B.CHANGE_DATE
			) C 
			    ON C.IDN_NO = A.IDN_NO
			 INNER JOIN dbo.LIONS_ORGAN_CODE D
				ON D.ORGAN_CODE = A.ORGAN_CODE
			   AND (
					   D.ORGAN_ABOLISH_DATE IS NULL 
					OR D.ORGAN_ABOLISH_DATE = '' 
					OR D.ORGAN_ABOLISH_DATE >= @fromDate
				)
			 WHERE A.UPPER_ORGAN_CODE = @orgCode
		)
		
		SELECT  X.DISTRICT_CODE AS inputDistrictCode
			   ,X.SESSION_YEAR AS inputSessionYear
			   ,X.CLUB_CODE	AS inputClubCode
			   ,X.KO_NAME AS inputOrganName
			   ,X.CODE2	AS inputStandScore
			   ,CONVERT(INT, SUBSTRING(CONVERT(CHAR(8), GETDATE(), 112),5,2)) AS mm
			   ,ISNULL(MDAY, 0) AS mday
			   ,[1ST] AS inputFirst
			   ,[2ST] AS inputSecond
			   ,[3ST] AS inputThird
			   ,[4ST] AS inputFourth
			   ,[5ST] AS inputFifth
			   ,[6ST] AS inputSixth
			   ,[7ST] AS inputSeventh
			   ,[8ST] AS inputEighth
			   ,[9ST] AS inputNineth
			   ,[10ST] AS inputTenth
			   ,[11ST] AS inputEleventh
			   ,[12ST] AS inputTwelveth
			   ,(
					  CASE WHEN [1ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [2ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [3ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [4ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [5ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [6ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [7ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [8ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [9ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [10ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [11ST] > '' THEN 1 ELSE 0 END
					+ CASE WHEN [12ST] > '' THEN 1 ELSE 0 END
				 ) * CODE2 AS inputTotalScore
		  FROM (
			SELECT  A.UPPER_ORGAN_CODE as DISTRICT_CODE
				   ,@yearCode as SESSION_YEAR
				   ,A.ORGAN_CODE as CLUB_CODE
				   ,B.KO_NAME
				   ,@score CODE2
				   ,@mday as MDAY
				   ,RTRIM(ISNULL(C.[JUL_DUE], '')) AS [7ST]
				   ,RTRIM(ISNULL(C.[AUG_DUE], '')) AS [8ST]
				   ,RTRIM(ISNULL(C.[SEP_DUE], '')) AS [9ST]
				   ,RTRIM(ISNULL(C.[OCT_DUE], '')) AS [10ST]
				   ,RTRIM(ISNULL(C.[NOV_DUE], '')) AS [11ST]
				   ,RTRIM(ISNULL(C.[DEC_DUE], '')) AS [12ST]			
				   ,RTRIM(ISNULL(C.[JAN_DUE], '')) AS [1ST]
				   ,RTRIM(ISNULL(C.[FEB_DUE], '')) AS [2ST]
				   ,RTRIM(ISNULL(C.[MAR_DUE], '')) AS [3ST]
				   ,RTRIM(ISNULL(C.[APR_DUE],'')) AS [4ST]
				   ,RTRIM(ISNULL(C.[MAY_DUE],'')) AS [5ST]
				   ,RTRIM(ISNULL(C.[JUN_DUE],'')) AS [6ST]
			  FROM ORG_TREE A
			 INNER JOIN dbo.LIONS_ORGAN_CODE B
			    ON B.ORGAN_CODE = A.ORGAN_CODE
			  LEFT OUTER JOIN dbo.LIONS_REPORT_DATA_SCORE C
			    ON C.CLUB_CODE = A.ORGAN_CODE 
			   AND C.DISTRICT_CODE = @orgCode 
			   AND C.SESSION_YEAR = @yearCode
		) X
	]]>
		<dynamic prepend="WHERE">
	 		<isEqual  property="order" compareValue="3">
	 		<![CDATA[
			(
			    CASE WHEN [JUL_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [AUG_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [SEP_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [OCT_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [NOV_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [DEC_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [JAN_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [FEB_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [MAR_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [APR_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [MAY_DUE] > '' THEN 1 ELSE 0 END
			  + CASE WHEN [JUN_DUE] > '' THEN 1 ELSE 0 END
			) * CODE2 > 0
	 		]]>
	 		</isEqual>
 		</dynamic>
		<dynamic prepend="ORDER BY">
 		    <isEqual property="order" compareValue="1">
	 			inputClubCode
	 		</isEqual>
	 		<isEqual property="order" compareValue="2">
	 			inputOrganName
	 		</isEqual>
	 		<isEqual  property="order" compareValue="3">
	 			inputTotalScore
	 		</isEqual>
 		</dynamic>
 	</select>
 	
 	
 	
	<update id="lionsclubs.com.MM3.MM3_5.MM3_27.mergeData"  parameterClass="MM3_27VO_DATA">
DECLARE @districtCode NVARCHAR(10)
DECLARE @sessionYear NVARCHAR(4)
DECLARE @clubCode NVARCHAR(10)
DECLARE @memberNo as NVARCHAR(100)
DECLARE @inputFirst as NVARCHAR(8)
DECLARE @inputSecond as NVARCHAR(8)
DECLARE @inputThird as NVARCHAR(8)
DECLARE @inputFourth as NVARCHAR(8)
DECLARE @inputFifth as NVARCHAR(8)
DECLARE @inputSixth as NVARCHAR(8)
DECLARE @inputSeventh as NVARCHAR(8)
DECLARE @inputEighth as NVARCHAR(8)
DECLARE @inputNineth as NVARCHAR(8)
DECLARE @inputTenth as NVARCHAR(8)
DECLARE @inputEleventh as NVARCHAR(8)
DECLARE @inputTwelveth as NVARCHAR(8)

SET @districtCode	= #inputDistrictCode#;
SET @sessionYear	= #inputSessionYear#;
SET @clubCode		= #inputClubCode#;
SET @memberNo		= #memberNo#; 
SET @inputFirst		= #inputFirst#;
SET @inputSecond	= #inputSecond#;
SET @inputThird		= #inputThird#;
SET @inputFourth	= #inputFourth#;
SET @inputFifth		= #inputFifth#;
SET @inputSixth		= #inputSixth#;
SET @inputSeventh	= #inputSeventh#;
SET @inputEighth	= #inputEighth#;
SET @inputNineth	= #inputNineth#;
SET @inputTenth		= #inputTenth#;
SET @inputEleventh	= #inputEleventh#;
SET @inputTwelveth	= #inputTwelveth#;

 MERGE LIONS_REPORT_DATA_SCORE AS T
     	USING (SELECT @districtCode, @sessionYear, @clubCode) 
     		AS S (DISTRICT_CODE, SESSION_YEAR, CLUB_CODE)
     ON		T.DISTRICT_CODE	= S.DISTRICT_CODE
		AND T.SESSION_YEAR	= S.SESSION_YEAR
		AND T.CLUB_CODE		= S.CLUB_CODE
     WHEN NOT MATCHED BY TARGET THEN
			INSERT (
					DISTRICT_CODE
				   ,SESSION_YEAR
				   ,CLUB_CODE
				   ,[JAN_DUE]
				   ,[FEB_DUE]
				   ,[MAR_DUE]
				   ,[APR_DUE]
				   ,[MAY_DUE]
				   ,[JUN_DUE]
				   ,[JUL_DUE]
				   ,[AUG_DUE]
				   ,[SEP_DUE]
				   ,[OCT_DUE]
				   ,[NOV_DUE]
				   ,[DEC_DUE]
				   ,INSERT_DATE
				   ,INSERT_NAME
				   ,UPDATE_DATE
				   ,UPDATE_NAME
			) VALUES (
				 S.DISTRICT_CODE
				,S.SESSION_YEAR
				,S.CLUB_CODE
				,@inputFirst
				,@inputSecond
				,@inputThird
				,@inputFourth
				,@inputFifth
				,@inputSixth
				,@inputSeventh
				,@inputEighth
				,@inputNineth
				,@inputTenth
				,@inputEleventh
				,@inputTwelveth
				,GETDATE()	/* 생성일자 */
				,@memberNo	/* 생성자 */
				,GETDATE()	/* 수정일자 */
				,@memberNo	/* 수정자 */
			)
     WHEN MATCHED 
     		THEN UPDATE SET
				   T.[JUL_DUE]		= @inputSeventh
				   ,T.[AUG_DUE]		= @inputEighth
				   ,T.[SEP_DUE]		= @inputNineth
				   ,T.[OCT_DUE]		= @inputTenth
				   ,T.[NOV_DUE]		= @inputEleventh
				   ,T.[DEC_DUE]		= @inputTwelveth
				   ,T.[JAN_DUE]		= @inputFirst
				   ,T.[FEB_DUE]		= @inputSecond
				   ,T.[MAR_DUE]		= @inputThird
				   ,T.[APR_DUE]		= @inputFourth
				   ,T.[MAY_DUE]		= @inputFifth
				   ,T.[JUN_DUE]		= @inputSixth
				   ,T.UPDATE_DATE = GETDATE()
				   ,T.UPDATE_NAME = @memberNo 
				   ;
	</update>
 	
	

 	<select id="lionsclubs.com.MM3.MM3_5.MM3_27.SelectDate" resultClass="MM3_27VO_DATA">
 	<![CDATA[
 		DECLARE @mday as INT
		DECLARE @orgCode NVARCHAR(10)
		
		SET @orgCode = #inputDistrictCode#;
		SET @mday = (SELECT CAST(CODE2 as INT) FROM dbo.LIONS_CODE WHERE GROUP_CODE = '8520' AND  CODE1 = SUBSTRING(@orgCode,1,3) + '-' + SUBSTRING(@orgCode,4,3));
		select 
			case when (today >= gdate1 and today <= gdate2) or (mday = 0) then 'Y'
			else 'N' end as dateYn
			, convert(int, substring(today,6,2)) as mm	
			, gdate2 as mDate
			, mday
		from (
				select convert(char(10), getdate(), 20) as today
						, @mday as mday
						, SUBSTRING(convert(char(10), getdate(), 20),0,9)
						  + CASE WHEN @mday < 10 THEN '0'+convert(char(1),@mday) ELSE convert(char(2),@mday) END as gdate2
						, SUBSTRING(convert(char(10), getdate(), 20),0,9)+'01' as gdate1
		) A
	]]>
	</select>
 	
</sqlMap>
