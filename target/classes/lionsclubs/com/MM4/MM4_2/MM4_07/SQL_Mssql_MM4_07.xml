<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM4.MM4_2.MM4_07">

	<typeAlias alias="MM4_07VO_PARAM"          type="lionsclubs.com.MM4.MM4_2.MM4_07.MM4_07VO_PARAM"/>

<sql id="lionsclubs.com.MM4.MM4_2.MM4_07.commonSql">
<![CDATA[
DECLARE @yearCode INT
DECLARE @orgCode  NVARCHAR(10)
DECLARE @fromDate NVARCHAR(8)
DECLARE @toDate   NVARCHAR(8)
DECLARE @basicDate NVARCHAR(10)

SET @yearCode = #yearCode#;
SET @orgCode = #orgCode#;
SET @fromDate = CAST(@yearCode - 1 as NVARCHAR(4)) + '0701';
SET @toDate   = CAST(@yearCode     as NVARCHAR(4)) + '0630';
SET @basicDate = CASE WHEN @yearCode < convert(int,YEAR(getdate())) THEN convert(char(4),@yearCode)+'0630' ELSE convert(char(10), getdate(), 20) end;

WITH 
 GRADE_CODE AS ( /* 가입년차코드 생성 */
	          SELECT  0 AS SECTER_KEY,  0 AS S_TERM ,  1 AS E_TERM , '1년미만' AS KEY_DESC
	UNION ALL SELECT  1 AS SECTER_KEY,  1 AS S_TERM ,  2 AS E_TERM , '1-2년' AS KEY_DESC
	UNION ALL SELECT  2 AS SECTER_KEY,  2 AS S_TERM ,  3 AS E_TERM , '2-3년' AS KEY_DESC
	UNION ALL SELECT  3 AS SECTER_KEY,  3 AS S_TERM ,  4 AS E_TERM , '3-4년' AS KEY_DESC
	UNION ALL SELECT  4 AS SECTER_KEY,  4 AS S_TERM ,  5 AS E_TERM , '4-5년' AS KEY_DESC
	UNION ALL SELECT  5 AS SECTER_KEY,  5 AS S_TERM ,  6 AS E_TERM , '5-6년' AS KEY_DESC
	UNION ALL SELECT  6 AS SECTER_KEY,  6 AS S_TERM ,  7 AS E_TERM , '6-7년' AS KEY_DESC
	UNION ALL SELECT  7 AS SECTER_KEY,  7 AS S_TERM ,  8 AS E_TERM , '7-8년' AS KEY_DESC
	UNION ALL SELECT  8 AS SECTER_KEY,  8 AS S_TERM ,  9 AS E_TERM , '8-9년' AS KEY_DESC
	UNION ALL SELECT  9 AS SECTER_KEY,  9 AS S_TERM , 10 AS E_TERM , '9-10년' AS KEY_DESC
	UNION ALL SELECT 10 AS SECTER_KEY, 10 AS S_TERM , 15 AS E_TERM , '10-15년' AS KEY_DESC
	UNION ALL SELECT 15 AS SECTER_KEY, 15 AS S_TERM , 20 AS E_TERM , '15-20년' AS KEY_DESC
	UNION ALL SELECT 20 AS SECTER_KEY, 20 AS S_TERM , 25 AS E_TERM , '20-25년' AS KEY_DESC
	UNION ALL SELECT 25 AS SECTER_KEY, 25 AS S_TERM , 30 AS E_TERM , '25-30년' AS KEY_DESC
	UNION ALL SELECT 30 AS SECTER_KEY, 30 AS S_TERM , 40 AS E_TERM , '30-40년' AS KEY_DESC
	UNION ALL SELECT 40 AS SECTER_KEY, 40 AS S_TERM , 99 AS E_TERM , '40년이상' AS KEY_DESC
),
END_CODE AS ( /* 퇴회코드 */
	SELECT
		 CODE
		,CODE_NAME
		,ORD
	FROM dbo.LIONS_CODE
	WHERE GROUP_CODE = (SELECT TOP 1 CODE1 FROM dbo.LIONS_CODE WHERE GROUP_CODE = '2700' AND CODE = '1050' AND USE_YN = 'Y')
), 
GRADE_END_CODE AS ( /* 가입년차코드별 퇴회코드 키 생성 */
	SELECT
		  A.SECTER_KEY
		, B.CODE as OUT_DESC
	FROM GRADE_CODE A
	CROSS JOIN (
		SELECT
		CODE
		FROM END_CODE
	) B
),

ORG_TREE_TO AS ( /* 조직트리 - 현재 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE		
		WHERE D.SPOT_NIGHT != '' 
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate OR D.ORGAN_ABOLISH_DATE = '')	
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate AND @toDate
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),

MEMBER_CODE_TO AS ( /* 조직 정보(현재) */
	SELECT
		A.ORGAN_CODE as LVL1_CODE			/* 연합회 코드 */
		,B.ORGAN_CODE as LVL2_CODE			/* 복합지구코드 */
		,C.ORGAN_CODE as LVL3_CODE			/* 지구코드 */
		,D.ORGAN_CODE as LVL4_CODE 			/* 클럽코드 */	
		,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE	
	FROM ORG_TREE_TO A 
	INNER JOIN ORG_TREE_TO B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
	INNER JOIN ORG_TREE_TO C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
	INNER JOIN ORG_TREE_TO D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
	]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="4">
		<![CDATA[
		WHERE D.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
<![CDATA[
), 
CLUB_CODE_OUT AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_TO
		where ORGAN_ABOLISH_DATE >= @fromDate AND ORGAN_ABOLISH_DATE < @toDate
	),

MEMBER_CNT_TO_PREV AS ( /* 회원 LIST */		
	SELECT
		H.MEMBER_NO
	FROM dbo.LIONS_MEMBER_CLUB_HIST H
	INNER JOIN MEMBER_CODE_TO C ON C.LVL4_CODE = H.ORGAN_CODE
	/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
	LEFT OUTER JOIN CLUB_CODE_OUT O ON O.LVL4_CODE = C.LVL4_CODE 
	WHERE H.[START_DATE] <= @toDate AND H.END_DATE > @toDate	
	AND O.LVL4_CODE is null						
),	
MEMBER_CNT_TO AS ( /* 년차(개월수로 모두 합산해서 12개월로 나누기한 년차임) */	
	SELECT 
		A.MEMBER_NO 
		, (SUM(GRADE)/365) as GRADE
	FROM(	
		SELECT
			H.MEMBER_NO
			, DATEDIFF(day,CONVERT(Date,H.[START_DATE],12),case when substring(H.END_DATE,1,4)='9999' then @basicDate else H.END_DATE end) as GRADE
		FROM dbo.LIONS_MEMBER_CLUB_HIST H
		INNER JOIN MEMBER_CNT_TO_PREV C ON C.MEMBER_NO = H.MEMBER_NO	
		WHERE H.[START_DATE] < @toDate
	) A
	GROUP BY A.MEMBER_NO					
),
MEMBER_CNT_OUT AS ( /* 회원수 퇴회 */		
	SELECT
		H.MEMBER_NO		
		, H.ORGAN_CODE		
		, H.APP_DESC_CODE	
		, H.[START_DATE], H.END_DATE
	FROM dbo.LIONS_APPOINTMENT H
	INNER JOIN MEMBER_CODE_TO O ON O.LVL4_CODE = H.ORGAN_CODE	
	WHERE H.APP_KIND_CODE = '1050'
	AND H.[START_DATE] BETWEEN @fromDate AND @toDate			
),


DATA_PER_GRADE AS ( /* 가입년차별 회원정보 + 년차구분코드 */
	SELECT
		 MEMBER_NO			
		,(SELECT A.SECTER_KEY FROM GRADE_CODE A  WHERE A.S_TERM <= GRADE AND A.E_TERM > GRADE) AS SECTER_KEY
	FROM MEMBER_CNT_TO	
), 
MEMBER_CNT_OUT_SECTER AS (
	SELECT
		DISTINCT
		H.MEMBER_NO
		,H.APP_DESC_CODE
		,(SELECT A.SECTER_KEY FROM GRADE_CODE A  WHERE A.S_TERM <= (DATEDIFF(yy,CONVERT(Date,H2.[START_DATE],12),H.[START_DATE])) AND A.E_TERM > (DATEDIFF(yy,CONVERT(Date,H2.[START_DATE],12),H.[START_DATE]))) AS SECTER_KEY	
	FROM MEMBER_CNT_OUT as H
	LEFT OUTER JOIN (
		SELECT A.ORGAN_CODE, A.MEMBER_NO, MAX(A.[START_DATE]) as [START_DATE] FROM dbo.LIONS_APPOINTMENT A
		WHERE A.APP_KIND_CODE = '1040' AND A.APP_DESC_CODE IN ('1000', '1020', '1030')	
		AND substring(A.END_DATE,1,4) != '9999' AND A.[START_DATE] < (SELECT MAX(H3.[START_DATE]) FROM MEMBER_CNT_OUT H3 WHERE H3.MEMBER_NO = A.MEMBER_NO)
		GROUP BY A.ORGAN_CODE, A.MEMBER_NO	
	) H2 ON H2.MEMBER_NO = H.MEMBER_NO AND H2.ORGAN_CODE = H.ORGAN_CODE 
),


TOTAL_CNT_PER_SECTER_KEY AS ( /* 년차구분코드별 회원수 */
	SELECT 
		 SECTER_KEY
		,COUNT(*) as TOT_CNT
	FROM DATA_PER_GRADE
	GROUP BY SECTER_KEY
),

OUT_CNT_PER_SECTER_KEY_OUT_DESC AS ( /* 년차구분코드 + 퇴회코드별 회원수 */
	SELECT
		 SECTER_KEY
		,APP_DESC_CODE
		,COUNT(*) as CNT
	FROM MEMBER_CNT_OUT_SECTER 
	GROUP BY SECTER_KEY, APP_DESC_CODE
), 
OUT_CNT_PER_SECTER_KEY AS (
	SELECT
		 SECTER_KEY
		 ]]>
		<iterate property="outCode" conjunction="," prepend=",">		
			<![CDATA[
				 [$outCode[]$]
			]]>
		</iterate>
		<![CDATA[
	FROM (
		SELECT
			 A.SECTER_KEY
			,A.OUT_DESC
			,ISNULL(B.CNT,0) as CNT
		FROM GRADE_END_CODE A
		LEFT OUTER JOIN OUT_CNT_PER_SECTER_KEY_OUT_DESC B ON B.SECTER_KEY = A.SECTER_KEY AND B.APP_DESC_CODE = A.OUT_DESC
	) X
	PIVOT(SUM(X.CNT) FOR X.OUT_DESC IN (
		 ]]>
		<iterate property="outCode" conjunction=",">		
			<![CDATA[
				 [$outCode[]$]
			]]>
		</iterate>
		<![CDATA[
	)) as PVT
)
]]>
</sql>	
 	<select id="lionsclubs.com.MM4.MM4_2.MM4_07.selectList" resultClass="java.util.HashMap" parameterClass="MM4_07VO_PARAM">
		<include refid="lionsclubs.com.MM4.MM4_2.MM4_07.commonSql" />
		<![CDATA[
			SELECT
			 A.KEY_DESC
		 ]]>
		<iterate property="outCode" conjunction="," prepend=",">		
			<![CDATA[
				 [$outCode[]$]
			]]>
		</iterate>
		<![CDATA[
			,ISNULL(C.TOT_CNT,0) as memCnt
		 ]]>
			<iterate property="outCode" conjunction="+" prepend=",">		
				<![CDATA[
					 ISNULL([$outCode[]$],0)
				]]>
			</iterate>
			 as outCnt
		<![CDATA[
			FROM GRADE_CODE A
			INNER JOIN OUT_CNT_PER_SECTER_KEY B
			ON B.SECTER_KEY = A.SECTER_KEY
			LEFT OUTER JOIN TOTAL_CNT_PER_SECTER_KEY C ON C.SECTER_KEY = A.SECTER_KEY
			ORDER BY A.SECTER_KEY ASC
		]]>	
 	</select>
 	
 	

</sqlMap>
