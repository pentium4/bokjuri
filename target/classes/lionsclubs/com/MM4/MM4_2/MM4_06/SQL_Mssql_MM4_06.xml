<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM4.MM4_2.MM4_06">

	<typeAlias alias="MM4_06VO" type="lionsclubs.com.MM4.MM4_2.MM4_06.MM4_06VO"/>
	<typeAlias alias="MM4_06VO_PARAM" type="lionsclubs.com.MM4.MM4_2.MM4_06.MM4_06VO_PARAM"/>

	<sql id="lionsclubs.com.MM4.MM4_2.MM4_06.commonSql">
	<![CDATA[
WITH 
ORG_TREE_1 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		
		WHERE D.SPOT_NIGHT != '' 
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate1 OR D.ORGAN_ABOLISH_DATE = '')	
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate1 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_1 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_1 A
		INNER JOIN ORG_TREE_1 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_1 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_1 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode			/* 복합지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode			/* 지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode			/* 클럽코드 */
		]]>
		</isEqual>
		<![CDATA[
),
CLUB_CODE_OUT_1 AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_1
		where ORGAN_ABOLISH_DATE >= @fromDate1 AND ORGAN_ABOLISH_DATE < @toDate1
	),
MEMBER_LIST_1 AS (
		SELECT			
			B.ORGAN_CODE as ORGAN_CODE,			
			COUNT(DISTINCT B.MEMBER_NO) as MEMBER_CNT_TO
		FROM (
			SELECT
				H.MEMBER_NO
				/* C.LVL1_CODE as ORGAN_CODE */
				]]>
				<isEqual property="lvl" compareValue="1">
				<![CDATA[
				,C.LVL2_CODE as ORGAN_CODE			/* 복합지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="2">
				<![CDATA[
				,C.LVL3_CODE as ORGAN_CODE			/* 지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="3">
				<![CDATA[
				,C.LVL4_CODE as ORGAN_CODE			/* 클럽코드 */
				]]>
				</isEqual>
				<![CDATA[
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN MEMBER_CODE_1 C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT_1 O ON O.LVL4_CODE = C.LVL4_CODE 
			WHERE H.[START_DATE] <= @toDate1 AND H.END_DATE > @toDate1	
			AND O.LVL4_CODE is null
		) B 
		GROUP BY B.ORGAN_CODE
),


ORG_TREE_2 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 
			    AND (D.ORGAN_ABOLISH_DATE >= @fromDate2 OR D.ORGAN_ABOLISH_DATE = '')
			    AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate2 AND @toDate2
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)		
),
MEMBER_CODE_2 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_2 A
		INNER JOIN ORG_TREE_2 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_2 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_2 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode			/* 복합지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode			/* 지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode			/* 클럽코드 */
		]]>
		</isEqual>
		<![CDATA[
),
CLUB_CODE_OUT_2 AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_2
		where ORGAN_ABOLISH_DATE >= @fromDate2 AND ORGAN_ABOLISH_DATE < @toDate2
	),
MEMBER_LIST_2 AS (
		SELECT			
			B.ORGAN_CODE as ORGAN_CODE,			
			COUNT(DISTINCT B.MEMBER_NO) as MEMBER_CNT_TO
		FROM (
			SELECT
				H.MEMBER_NO
				/* C.LVL1_CODE as ORGAN_CODE */
				]]>
				<isEqual property="lvl" compareValue="1">
				<![CDATA[
				,C.LVL2_CODE as ORGAN_CODE			/* 복합지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="2">
				<![CDATA[
				,C.LVL3_CODE as ORGAN_CODE			/* 지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="3">
				<![CDATA[
				,C.LVL4_CODE as ORGAN_CODE			/* 클럽코드 */
				]]>
				</isEqual>
				<![CDATA[
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN MEMBER_CODE_2 C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT_2 O ON O.LVL4_CODE = C.LVL4_CODE
			WHERE H.[START_DATE] <= @toDate2 AND H.END_DATE > @toDate2
			AND O.LVL4_CODE is null
		) B 
		GROUP BY B.ORGAN_CODE
),

ORG_TREE_3 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			  
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate3 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate3 AND @toDate3
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_3 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_3 A
		INNER JOIN ORG_TREE_3 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_3 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_3 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode			/* 복합지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode			/* 지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode			/* 클럽코드 */
		]]>
		</isEqual>
		<![CDATA[
),
CLUB_CODE_OUT_3 AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_3
		where ORGAN_ABOLISH_DATE >= @fromDate3 AND ORGAN_ABOLISH_DATE < @toDate3
	),
MEMBER_LIST_3 AS (
		SELECT			
			B.ORGAN_CODE as ORGAN_CODE,			
			COUNT(DISTINCT B.MEMBER_NO) as MEMBER_CNT_TO
		FROM (
			SELECT
				H.MEMBER_NO
				/* C.LVL1_CODE as ORGAN_CODE */
				]]>
				<isEqual property="lvl" compareValue="1">
				<![CDATA[
				,C.LVL2_CODE as ORGAN_CODE			/* 복합지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="2">
				<![CDATA[
				,C.LVL3_CODE as ORGAN_CODE			/* 지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="3">
				<![CDATA[
				,C.LVL4_CODE as ORGAN_CODE			/* 클럽코드 */
				]]>
				</isEqual>
				<![CDATA[
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN MEMBER_CODE_3 C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT_3 O ON O.LVL4_CODE = C.LVL4_CODE 
			WHERE H.[START_DATE] <= @toDate3 AND H.END_DATE > @toDate3
			AND O.LVL4_CODE is null
		) B 
		GROUP BY B.ORGAN_CODE
),


ORG_TREE_4 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			  
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate4 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate4 AND @toDate4
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_4 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_4 A
		INNER JOIN ORG_TREE_4 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_4 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_4 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode			/* 복합지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode			/* 지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode			/* 클럽코드 */
		]]>
		</isEqual>
		<![CDATA[
),
CLUB_CODE_OUT_4 AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_4
		where ORGAN_ABOLISH_DATE >= @fromDate4 AND ORGAN_ABOLISH_DATE < @toDate4
	),
MEMBER_LIST_4 AS (
		SELECT			
			B.ORGAN_CODE as ORGAN_CODE,			
			COUNT(DISTINCT B.MEMBER_NO) as MEMBER_CNT_TO
		FROM (
			SELECT
				H.MEMBER_NO
				/* C.LVL1_CODE as ORGAN_CODE */
				]]>
				<isEqual property="lvl" compareValue="1">
				<![CDATA[
				,C.LVL2_CODE as ORGAN_CODE			/* 복합지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="2">
				<![CDATA[
				,C.LVL3_CODE as ORGAN_CODE			/* 지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="3">
				<![CDATA[
				,C.LVL4_CODE as ORGAN_CODE			/* 클럽코드 */
				]]>
				</isEqual>
				<![CDATA[
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN MEMBER_CODE_4 C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT_4 O ON O.LVL4_CODE = C.LVL4_CODE 
			WHERE H.[START_DATE] <= @toDate4 AND H.END_DATE > @toDate4
			AND O.LVL4_CODE is null
		) B 
		GROUP BY B.ORGAN_CODE
),

ORG_TREE_5 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			   
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate5 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate5 AND @toDate5
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_5 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_5 A
		INNER JOIN ORG_TREE_5 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_5 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_5 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
		WHERE A.ORGAN_CODE = @orgCode			/* 복합지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
		WHERE B.ORGAN_CODE = @orgCode			/* 지구코드 */
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
		WHERE C.ORGAN_CODE = @orgCode			/* 클럽코드 */
		]]>
		</isEqual>
		<![CDATA[
),
CLUB_CODE_OUT_5 AS (
		select 
			 LVL1_CODE
			,LVL2_CODE
			,LVL3_CODE
			,LVL4_CODE
		from MEMBER_CODE_5
		where ORGAN_ABOLISH_DATE >= @fromDate5 AND ORGAN_ABOLISH_DATE < @toDate5
	),
MEMBER_LIST_5 AS (
		SELECT			
			B.ORGAN_CODE as ORGAN_CODE,			
			COUNT(DISTINCT B.MEMBER_NO) as MEMBER_CNT_TO
		FROM (
			SELECT
				H.MEMBER_NO
				/* C.LVL1_CODE as ORGAN_CODE */
				]]>
				<isEqual property="lvl" compareValue="1">
				<![CDATA[
				,C.LVL2_CODE as ORGAN_CODE			/* 복합지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="2">
				<![CDATA[
				,C.LVL3_CODE as ORGAN_CODE			/* 지구코드 */
				]]>
				</isEqual>
				<isEqual property="lvl" compareValue="3">
				<![CDATA[
				,C.LVL4_CODE as ORGAN_CODE			/* 클럽코드 */
				]]>
				</isEqual>
				<![CDATA[
			FROM dbo.LIONS_MEMBER_CLUB_HIST H
			INNER JOIN MEMBER_CODE_5 C ON C.LVL4_CODE = H.ORGAN_CODE
			/* 클럽만 퇴회 처리되고 회원이 퇴회처리안된 회원은 카운트안되도록 처리 : 2014-11-24 */
			LEFT OUTER JOIN CLUB_CODE_OUT_5 O ON O.LVL4_CODE = C.LVL4_CODE 
			WHERE H.[START_DATE] <= @toDate5 AND H.END_DATE > @toDate5
			AND O.LVL4_CODE is null
		) B 
		GROUP BY B.ORGAN_CODE
),


LEVEL_SUM AS (
		SELECT
			 SUM(A.cnt1) as cnt1
			,SUM(A.cnt2) as cnt2
			,SUM(A.cnt3) as cnt3
			,SUM(A.cnt4) as cnt4
			,SUM(A.cnt5) as cnt5
			,AVG(A.avgs) as avgs
			,organCode
		FROM (
						SELECT
							 MEMBER_CNT_TO as cnt1
							,0 as cnt2
							,0 as cnt3
							,0 as cnt4
							,0 as cnt5
							,MEMBER_CNT_TO as avgs
							, ORGAN_CODE as organCode
						FROM MEMBER_LIST_1
					
					UNION ALL
					
						SELECT
							 0 as cnt1
							,MEMBER_CNT_TO as cnt2
							,0 as cnt3
							,0 as cnt4
							,0 as cnt5
							,MEMBER_CNT_TO as avgs
							, ORGAN_CODE as organCode
						FROM MEMBER_LIST_2
					
					UNION ALL
					
						SELECT
							 0 as cnt1
							,0 as cnt2
							,MEMBER_CNT_TO as cnt3
							,0 as cnt4
							,0 as cnt5
							,MEMBER_CNT_TO as avgs
							, ORGAN_CODE as organCode
						FROM MEMBER_LIST_3
					
					UNION ALL
					
						SELECT
							 0 as cnt1
							,0 as cnt2
							,0 as cnt3
							,MEMBER_CNT_TO as cnt4
							,0 as cnt5
							,MEMBER_CNT_TO as avgs
							, ORGAN_CODE as organCode
						FROM MEMBER_LIST_4
					
					UNION ALL
					
						SELECT
							 0 as cnt1
							,0 as cnt2
							,0 as cnt3
							,0 as cnt4
							,MEMBER_CNT_TO as cnt5
							,MEMBER_CNT_TO as avgs
							, ORGAN_CODE as organCode
						FROM MEMBER_LIST_5
		) A
		GROUP BY organCode
), 

DATA_LIST as (
	SELECT
		 cnt1
		,cnt2
		,cnt3
		,cnt4
		,cnt5
		,avgs
		,organCode
	FROM LEVEL_SUM
)
,BASE_ORGAN_CODE AS (
	SELECT ORGAN_CODE
	FROM(
		SELECT
			COALESCE(A.ORGAN_CODE,B.ORGAN_CODE,C.ORGAN_CODE,D.ORGAN_CODE,E.ORGAN_CODE) as ORGAN_CODE
		FROM ORG_TREE_1 A
		FULL OUTER JOIN ORG_TREE_2 B ON B.ORGAN_CODE = A.ORGAN_CODE
		FULL OUTER JOIN ORG_TREE_3 C ON C.ORGAN_CODE = A.ORGAN_CODE
		FULL OUTER JOIN ORG_TREE_4 D ON D.ORGAN_CODE = A.ORGAN_CODE
		FULL OUTER JOIN ORG_TREE_5 E ON E.ORGAN_CODE = A.ORGAN_CODE
		WHERE A.UPPER_ORGAN_CODE = @orgCode 
		or B.UPPER_ORGAN_CODE = @orgCode
		or C.UPPER_ORGAN_CODE = @orgCode
		or D.UPPER_ORGAN_CODE = @orgCode
		or E.UPPER_ORGAN_CODE = @orgCode
	) A group by ORGAN_CODE
)

]]>
	</sql>
	
 	<select id="lionsclubs.com.MM4.MM4_2.MM4_06.selectList" resultClass="MM4_06VO" parameterClass="MM4_06VO_PARAM">
 	<![CDATA[
	DECLARE @yearCode INT
	DECLARE @orgCode NVARCHAR(10)
	DECLARE @lvl as INT
	DECLARE @toDate1 NVARCHAR(8)
	DECLARE @toDate2 NVARCHAR(8)
	DECLARE @toDate3 NVARCHAR(8)
	DECLARE @toDate4 NVARCHAR(8)
	DECLARE @toDate5 NVARCHAR(8)
	DECLARE @fromDate1 NVARCHAR(8)
	DECLARE @fromDate2 NVARCHAR(8)
	DECLARE @fromDate3 NVARCHAR(8)
	DECLARE @fromDate4 NVARCHAR(8)
	DECLARE @fromDate5 NVARCHAR(8)
	
	SET @yearCode  = #yearCode#;
	SET @orgCode   = #orgCode#;
	SET @lvl       = #lvl#;
	SET @toDate1   = CAST(@yearCode     as NVARCHAR(4)) + '0630';
	SET @toDate2   = CAST(@yearCode - 1 as NVARCHAR(4)) + '0630';
	SET @toDate3   = CAST(@yearCode - 2 as NVARCHAR(4)) + '0630';
	SET @toDate4   = CAST(@yearCode - 3 as NVARCHAR(4)) + '0630';
	SET @toDate5   = CAST(@yearCode - 4 as NVARCHAR(4)) + '0630';
	
	SET @fromDate1   = CAST(@yearCode - 1 as NVARCHAR(4)) + '0701';
	SET @fromDate2   = CAST(@yearCode - 2 as NVARCHAR(4)) + '0701';
	SET @fromDate3   = CAST(@yearCode - 3 as NVARCHAR(4)) + '0701';
	SET @fromDate4   = CAST(@yearCode - 4 as NVARCHAR(4)) + '0701';
	SET @fromDate5   = CAST(@yearCode - 5 as NVARCHAR(4)) + '0701';
 	]]>
		<include refid="lionsclubs.com.MM4.MM4_2.MM4_06.commonSql" />
		<![CDATA[
SELECT
	 X.ORGAN_CODE as orgCode
	,(SELECT ISNULL(KO_ABBR,'Not Club') FROM dbo.LIONS_ORGAN_CODE WHERE ORGAN_CODE=X.ORGAN_CODE) as orgName
 	,(SELECT ISNULL(ORGAN_MEETING,'') FROM dbo.LIONS_ORGAN_CODE WHERE ORGAN_CODE=X.ORGAN_CODE) as orgMeeting
	,ISNULL(A.cnt1,0) as cnt1
	,ISNULL(A.cnt2,0) as cnt2
	,ISNULL(A.cnt3,0) as cnt3
	,ISNULL(A.cnt4,0) as cnt4
	,ISNULL(A.cnt5,0) as cnt5
	,ISNULL(A.avgs,0) as avgs
	,CAST(CAST(@lvl as INTEGER) + 1 as NVARCHAR(10)) as lvl
FROM BASE_ORGAN_CODE X
LEFT OUTER JOIN DATA_LIST A ON A.organCode = X.ORGAN_CODE
ORDER BY X.ORGAN_CODE
		]]>
 	</select>
</sqlMap>
