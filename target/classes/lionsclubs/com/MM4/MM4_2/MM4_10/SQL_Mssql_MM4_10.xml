<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="lionsclubs.com.MM4.MM4_2.MM4_10">

	<typeAlias alias="MM4_10VO" type="lionsclubs.com.MM4.MM4_2.MM4_10.MM4_10VO"/>
	<typeAlias alias="MM4_10VO_ORG" type="lionsclubs.com.MM4.MM4_2.MM4_10.MM4_10VO_ORG"/>
	<typeAlias alias="MM4_10VO_PARAM" type="lionsclubs.com.MM4.MM4_2.MM4_10.MM4_10VO_PARAM"/>
	
	<sql id="lionsclubs.com.MM4.MM4_2.MM4_10.commonSql">
	<![CDATA[
DECLARE @orgCode NVARCHAR(10)
DECLARE @yearCode INT
DECLARE @month INT
DECLARE @month1 NVARCHAR(2)
DECLARE @month2 NVARCHAR(2)
DECLARE @fromDate1 NVARCHAR(8)
DECLARE @toDate1   NVARCHAR(8)
DECLARE @fromDate2 NVARCHAR(8)
DECLARE @toDate2   NVARCHAR(8)
DECLARE @fromDate3 NVARCHAR(8)
DECLARE @toDate3   NVARCHAR(8)
DECLARE @fromDate4 NVARCHAR(8)
DECLARE @toDate4   NVARCHAR(8)
DECLARE @fromDate5 NVARCHAR(8)
DECLARE @toDate5   NVARCHAR(8)

DECLARE @fromYear1 NVARCHAR(4)
DECLARE @toYear1 NVARCHAR(4)
DECLARE @fromYear2 NVARCHAR(4)
DECLARE @toYear2 NVARCHAR(4)
DECLARE @fromYear3 NVARCHAR(4)
DECLARE @toYear3 NVARCHAR(4)
DECLARE @fromYear4 NVARCHAR(4)
DECLARE @toYear4 NVARCHAR(4)
DECLARE @fromYear5 NVARCHAR(4)
DECLARE @toYear5 NVARCHAR(4)

SET @month = #month#;
SET @orgCode = #orgCode#;
SET @yearCode = #yearCode#;

SET @month1 = case when @month = '' then '07' else @month end;
SET @month1 = REPLICATE('0', 2-LEN(@month1)) + @month1;
SET @month2 = case when @month = '' then '06' else @month end;
SET @month2 = REPLICATE('0', 2-LEN(@month2)) + @month2;

SET @fromYear1 = case when @month1 > 6 then CAST(@yearCode - 1 as NVARCHAR(4)) else CAST(@yearCode as NVARCHAR(4)) end;
SET @toYear1 = case when @month2 > 6 then CAST(@yearCode - 1 as NVARCHAR(4)) else CAST(@yearCode as NVARCHAR(4)) end;
SET @fromDate1 = CAST(@fromYear1 as NVARCHAR(4)) + CAST(@month1 as NVARCHAR(2)) + '01';
SET @toDate1 = CONVERT(char(8), DATEADD(DD, -1, CAST(@toYear1 as NVARCHAR(4))+'-'+CAST(@month2 + 1 as NVARCHAR(2))+'-01'), 112);

SET @fromYear2 = case when @month1 > 6 then CAST(@yearCode - 2 as NVARCHAR(4)) else CAST(@yearCode - 1 as NVARCHAR(4)) end;
SET @toYear2 = case when @month2 > 6 then CAST(@yearCode - 2 as NVARCHAR(4)) else CAST(@yearCode - 1 as NVARCHAR(4)) end;
SET @fromDate2 = CAST(@fromYear2 as NVARCHAR(4)) + CAST(@month1 as NVARCHAR(2)) + '01';
SET @toDate2 = CONVERT(char(8), DATEADD(DD, -1, CAST(@toYear2 as NVARCHAR(4))+'-'+CAST(@month2 + 1 as NVARCHAR(2))+'-01'), 112);

SET @fromYear3 = case when @month1 > 6 then CAST(@yearCode - 3 as NVARCHAR(4)) else CAST(@yearCode - 2 as NVARCHAR(4)) end;
SET @toYear3 = case when @month2 > 6 then CAST(@yearCode - 3 as NVARCHAR(4)) else CAST(@yearCode - 2 as NVARCHAR(4)) end;
SET @fromDate3 = CAST(@fromYear3 as NVARCHAR(4)) + CAST(@month1 as NVARCHAR(2)) + '01';
SET @toDate3 = CONVERT(char(8), DATEADD(DD, -1, CAST(@toYear3 as NVARCHAR(4))+'-'+CAST(@month2 + 1 as NVARCHAR(2))+'-01'), 112);

SET @fromYear4 = case when @month1 > 6 then CAST(@yearCode - 4 as NVARCHAR(4)) else CAST(@yearCode - 3 as NVARCHAR(4)) end;
SET @toYear4 = case when @month2 > 6 then CAST(@yearCode - 4 as NVARCHAR(4)) else CAST(@yearCode - 3 as NVARCHAR(4)) end;
SET @fromDate4 = CAST(@fromYear4 as NVARCHAR(4)) + CAST(@month1 as NVARCHAR(2)) + '01';
SET @toDate4   = CONVERT(char(8), DATEADD(DD, -1, CAST(@toYear4 as NVARCHAR(4))+'-'+CAST(@month2 + 1 as NVARCHAR(2))+'-01'), 112);

SET @fromYear5 = case when @month1 > 6 then CAST(@yearCode - 5 as NVARCHAR(4)) else CAST(@yearCode - 4 as NVARCHAR(4)) end;
SET @toYear5 = case when @month2 > 6 then CAST(@yearCode - 5 as NVARCHAR(4)) else CAST(@yearCode - 4 as NVARCHAR(4)) end;
SET @fromDate5 = CAST(@fromYear5 as NVARCHAR(4)) + CAST(@month1 as NVARCHAR(2)) + '01';
SET @toDate5   = CONVERT(char(8), DATEADD(DD, -1, CAST(@toYear5 as NVARCHAR(4))+'-'+CAST(@month2 + 1 as NVARCHAR(2))+'-01'), 112);


WITH 
ORG_TREE_1 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE		
		WHERE D.SPOT_NIGHT != '' 
			  AND (D.ORGAN_ABOLISH_DATE >= @fromDate1 OR D.ORGAN_ABOLISH_DATE = '')	
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate1 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_1 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_1 A
		INNER JOIN ORG_TREE_1 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_1 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_1 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<![CDATA[	
), 
MONEY_AMOUNT_1 AS (
	SELECT
	 P.PAYMENT as payment
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			,C.LVL2_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			,C.LVL3_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			,C.LVL4_CODE				as orgCode
		]]>
		</isEqual>
		<![CDATA[				 
	FROM LIONS_MONEY_PAYMENT AS P
	INNER JOIN LIONS_MONEY_MASTER AS M ON M.IDN_NO = P.IDN_NO
	LEFT OUTER JOIN MEMBER_CODE_1 AS C ON C.LVL4_CODE = M.ORGAN_CODE  
	WHERE M.CLASS_ITEM_CODE='1030' AND M.DETAIL_ITEM_CODE = '1000'
	  AND P.PAYMENT_DATE BETWEEN @fromDate1 AND @toDate1	
),

ORG_TREE_2 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 
			    AND (D.ORGAN_ABOLISH_DATE >= @fromDate1 OR D.ORGAN_ABOLISH_DATE = '')
			    AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate1 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)			  
),
MEMBER_CODE_2 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,D.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_2 A
		INNER JOIN ORG_TREE_2 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_2 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_2 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<![CDATA[	
),
MONEY_AMOUNT_2 AS (
	SELECT
	 P.PAYMENT as payment
	 	]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			,C.LVL2_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			,C.LVL3_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			,C.LVL4_CODE				as orgCode
		]]>
		</isEqual>
		<![CDATA[		 
	FROM LIONS_MONEY_PAYMENT AS P
	INNER JOIN LIONS_MONEY_MASTER AS M ON M.IDN_NO = P.IDN_NO
	LEFT OUTER JOIN MEMBER_CODE_2 AS C ON C.LVL4_CODE = M.ORGAN_CODE  
	WHERE M.CLASS_ITEM_CODE='1030' AND M.DETAIL_ITEM_CODE = '1000'
	  AND P.PAYMENT_DATE BETWEEN @fromDate2 AND @toDate2
),

ORG_TREE_3 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			  
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate2 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate2 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_3 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,C.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,C.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_3 A
		INNER JOIN ORG_TREE_3 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_3 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_3 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<![CDATA[
),
MONEY_AMOUNT_3 AS (
	SELECT
	 P.PAYMENT as payment
	 	]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			,C.LVL2_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			,C.LVL3_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			,C.LVL4_CODE				as orgCode
		]]>
		</isEqual>
		<![CDATA[			 
	FROM LIONS_MONEY_PAYMENT AS P
	INNER JOIN LIONS_MONEY_MASTER AS M ON M.IDN_NO = P.IDN_NO
	INNER JOIN MEMBER_CODE_3 AS C ON C.LVL4_CODE = M.ORGAN_CODE  
	WHERE M.CLASS_ITEM_CODE='1030' AND M.DETAIL_ITEM_CODE = '1000'
	  AND P.PAYMENT_DATE BETWEEN @fromDate3 AND @toDate3
),

ORG_TREE_4 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			  
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate3 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate3 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_4 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,C.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,C.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_4 A
		INNER JOIN ORG_TREE_4 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_4 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_4 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<![CDATA[
),
MONEY_AMOUNT_4 AS (
	SELECT
	 P.PAYMENT as payment
	 	]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			,C.LVL2_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			,C.LVL3_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			,C.LVL4_CODE				as orgCode
		]]>
		</isEqual>
		<![CDATA[		 
	FROM LIONS_MONEY_PAYMENT AS P
	INNER JOIN LIONS_MONEY_MASTER AS M ON M.IDN_NO = P.IDN_NO
	INNER JOIN MEMBER_CODE_4 AS C ON C.LVL4_CODE = M.ORGAN_CODE  
	WHERE M.CLASS_ITEM_CODE='1030' AND M.DETAIL_ITEM_CODE = '1000'
	  AND P.PAYMENT_DATE BETWEEN @fromDate4 AND @toDate4
),

ORG_TREE_5 AS ( /* 조직트리 */
		SELECT 
			A2.ORGAN_CODE as ORGAN_CODE
			, A2.UPPER_ORGAN_CODE as UPPER_ORGAN_CODE
			, A2.ORGAN_OFFICER_MEMBER_NO as ORGAN_OFFICER_MEMBER_NO
			, D.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			, D.SPOT_NIGHT as SPOT_NIGHT
		FROM dbo.LIONS_ORGAN_CODE_HISTORY A2 
		INNER JOIN dbo.LIONS_ORGAN_CODE D ON D.ORGAN_CODE = A2.ORGAN_CODE
		WHERE D.SPOT_NIGHT != '' 			   
			   AND (D.ORGAN_ABOLISH_DATE >= @fromDate4 OR D.ORGAN_ABOLISH_DATE = '')
			   AND A2.IDN_NO IN (
					SELECT
					MAX(B.IDN_NO) OVER(PARTITION BY B.ORGAN_CODE) as IDN_NO
					FROM (
						SELECT
						ORGAN_CODE,
						MAX(CHANGE_DATE) CHANGE_DATE
						FROM dbo.LIONS_ORGAN_CODE_HISTORY
						WHERE CHANGE_DATE BETWEEN @fromDate4 AND @toDate1
						GROUP BY ORGAN_CODE
					) A
					INNER JOIN dbo.LIONS_ORGAN_CODE_HISTORY B
					ON B.ORGAN_CODE = A.ORGAN_CODE AND B.CHANGE_DATE = A.CHANGE_DATE
			)
),
MEMBER_CODE_5 AS (
		SELECT
			   A.ORGAN_CODE as LVL1_CODE
			  ,B.ORGAN_CODE as LVL2_CODE
			  ,C.ORGAN_CODE as LVL3_CODE
			  ,D.ORGAN_CODE as LVL4_CODE
			  ,C.ORGAN_ABOLISH_DATE as ORGAN_ABOLISH_DATE
			  ,C.SPOT_NIGHT as SPOT_NIGHT
		FROM ORG_TREE_5 A
		INNER JOIN ORG_TREE_5 B ON B.UPPER_ORGAN_CODE = A.ORGAN_CODE
		INNER JOIN ORG_TREE_5 C ON C.UPPER_ORGAN_CODE = B.ORGAN_CODE
		INNER JOIN ORG_TREE_5 D ON D.UPPER_ORGAN_CODE = C.ORGAN_CODE
		]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			WHERE A.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			WHERE B.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			WHERE C.ORGAN_CODE = @orgCode
		]]>
		</isEqual>
		<![CDATA[
),
MONEY_AMOUNT_5 AS (
	SELECT
	 P.PAYMENT as payment
	 	]]>
		<isEqual property="lvl" compareValue="1">
		<![CDATA[
			,C.LVL2_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="2">
		<![CDATA[
			,C.LVL3_CODE				as orgCode
		]]>
		</isEqual>
		<isEqual property="lvl" compareValue="3">
		<![CDATA[
			,C.LVL4_CODE				as orgCode
		]]>
		</isEqual>
		<![CDATA[		 
	FROM LIONS_MONEY_PAYMENT AS P
	INNER JOIN LIONS_MONEY_MASTER AS M ON M.IDN_NO = P.IDN_NO
	INNER JOIN MEMBER_CODE_5 AS C ON C.LVL4_CODE = M.ORGAN_CODE  
	WHERE M.CLASS_ITEM_CODE='1030' AND M.DETAIL_ITEM_CODE = '1000'
	  AND P.PAYMENT_DATE BETWEEN @fromDate5 AND @toDate5
),



AMOUNT_DATA AS (
SELECT
	 orgCode
	,payment as sum1
	,0 as sum2
	,0 as sum3
	,0 as sum4
	,0 as sum5
FROM MONEY_AMOUNT_1
UNION ALL
SELECT
	 orgCode
	,0 as sum1
	,payment as sum2
	,0 as sum3
	,0 as sum4
	,0 as sum5
FROM MONEY_AMOUNT_2
UNION ALL
SELECT
	 orgCode
	,0 as sum1
	,0 as sum2
	,payment as sum3
	,0 as sum4
	,0 as sum5
FROM MONEY_AMOUNT_3
UNION ALL
SELECT
	 orgCode
	,0 as sum1
	,0 as sum2
	,0 as sum3
	,payment as sum4
	,0 as sum5
FROM MONEY_AMOUNT_4
UNION ALL
SELECT
	 orgCode
	,0 as sum1
	,0 as sum2
	,0 as sum3
	,0 as sum4
	,payment as sum5
FROM MONEY_AMOUNT_5
)

	]]>
	</sql>	

 	<select id="lionsclubs.com.MM4.MM4_2.MM4_10.selectList" resultClass="MM4_10VO" parameterClass="MM4_10VO_PARAM">
 	<include refid="lionsclubs.com.MM4.MM4_2.MM4_10.commonSql" />
	<![CDATA[
SELECT 
	A.orgCode as orgCode
	, B.KO_NAME as orgName
	, sum1, sum2, sum3, sum4, sum5, tot
FROM (
		SELECT
			 orgCode
			,SUM(sum1) as sum1
			,SUM(sum2) as sum2
			,SUM(sum3) as sum3
			,SUM(sum4) as sum4
			,SUM(sum5) as sum5
			,SUM(sum1) + SUM(sum2) + SUM(sum3) + SUM(sum4) + SUM(sum5) as tot
		FROM AMOUNT_DATA
		GROUP BY orgCode
) as A
INNER JOIN dbo.LIONS_ORGAN_CODE B ON B.ORGAN_CODE = A.orgCode
ORDER BY A.orgCode
		]]>
	</select>
	
 	<select id="lionsclubs.com.MM4.MM4_2.MM4_10.selectOrgList" resultClass="MM4_10VO_ORG" parameterClass="MM4_10VO_PARAM">
 	<include refid="lionsclubs.com.MM4.MM4_2.MM4_10.commonSql" />
	<![CDATA[
	SELECT
		 A.ORGAN_CODE as orgCode
		,B.KO_NAME as orgName
		,SUBSTRING(B.ORGAN_MEETING,1,4) + '.' + SUBSTRING(B.ORGAN_MEETING,5,2) + '.' + SUBSTRING(B.ORGAN_MEETING,7,2) as orgMeeting
	FROM BASE_ORG_CODE A
	INNER JOIN dbo.LIONS_ORGAN_CODE B ON B.ORGAN_CODE = A.ORGAN_CODE
	ORDER BY 1
	]]>
	</select>
</sqlMap>